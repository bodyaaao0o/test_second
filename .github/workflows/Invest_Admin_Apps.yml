# name: Run Playwright tests for IA and AA

# on:
#   pull_request:
#     branches:
#       - dev
#   push:
#     branches:
#       - dev

# jobs:
#   setup:
#     name: Cache only (no install)
#     runs-on: ubuntu-latest
#     outputs:
#       cache-key: ${{ steps.cache-deps.outputs.cache-primary-key }}

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: 20

#       - name: Cache node_modules
#         id: cache-deps
#         uses: actions/cache@v4
#         with:
#           path: |
#             ./node_modules
#             ./penomo_tests/node_modules
#           key: penomo-tests-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             penomo-tests-

#   desktop-tests:
#     name: Run Desktop Tests
#     runs-on: ubuntu-latest
#     needs: setup
#     timeout-minutes: 30
#     defaults:
#       run:
#         working-directory: ./penomo_tests

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: 20

#       - name: Restore node_modules from cache
#         uses: actions/cache@v4
#         with:
#           path: |
#             ./node_modules
#             ./penomo_tests/node_modules
#           key: penomo-tests-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             penomo-tests-

#       - name: Install dependencies
#         run: npm ci

#       - name: Install Playwright browsers
#         run: npx playwright install --with-deps

#       - name: Clean previous results
#         run: rm -rf ./allure-results ./test-results

#       - name: Run auth tests (Desktop)
#         run: npx playwright test ./auth --project=chromium

#       - name: Run E2E tests (Desktop)
#         run: npx playwright test ./E2E --project=chromium

#       - name: Debug test results structure
#         if: always()
#         run: |
#           echo "=== Debugging test results structure ==="
#           echo "Current directory structure:"
#           find . -maxdepth 3 -type d -name "*result*" -o -name "*report*" | head -20

#           echo "=== Looking for image/trace files ==="
#           find . -path "./node_modules" -prune -o -type f \( -name '*.png' -o -name '*.trace' \) -print | head -10

#           echo "=== Allure results content before copy ==="
#           if [ -d "./allure-results" ]; then
#             echo "Allure results directory exists"
#             ls -la ./allure-results/
#           else
#             echo "No allure-results directory found"
#           fi

#       - name: Copy screenshots/traces to Allure results (Desktop)
#         if: always()
#         run: |
#           echo "Looking for artifacts to copy..."
#           mkdir -p ./allure-results

#           if [ -d "test-results" ]; then
#             echo "Copying from test-results directory..."
#             find test-results -type f \( -name '*.png' -o -name '*.zip' -o -name '*.trace' \) -exec cp -v {} ./allure-results/ \; 2>/dev/null || true
#           fi

#           if [ -d "playwright-report" ]; then
#             echo "Copying from playwright-report directory..."
#             find playwright-report -type f \( -name '*.png' -o -name '*.zip' \) -exec cp -v {} ./allure-results/ \; 2>/dev/null || true
#           fi

#           find . -path "./node_modules" -prune -o -path "./.git" -prune -o -type f \( -name '*.png' -o -name '*.zip' -o -name '*.trace' \) -print -exec cp -v {} ./allure-results/ \; 2>/dev/null || true

#           echo "Final artifacts in allure-results:"
#           ls -lah ./allure-results/ || echo "No artifacts found."

#           echo "=== Final verification ==="
#           echo "Allure results directory size:"
#           du -sh ./allure-results/ 2>/dev/null || echo "Directory not found"

#           echo "Files by type:"
#           find ./allure-results -name "*.png" | wc -l | xargs echo "PNG files:"
#           find ./allure-results -name "*.json" | wc -l | xargs echo "JSON files:"
#           find ./allure-results -name "*.trace" | wc -l | xargs echo "Trace files:"

#           chmod -R 755 ./allure-results/ 2>/dev/null || true

#       - name: Upload Allure raw results (Desktop)
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: allure-results-desktop
#           path: ./penomo_tests/allure-results
#           retention-days: 3
#           if-no-files-found: warn

#   mobile-tests:
#     name: Run Mobile Tests
#     runs-on: ubuntu-latest
#     needs: desktop-tests
#     if: always()
#     timeout-minutes: 30
#     defaults:
#       run:
#         working-directory: ./penomo_tests

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: 20

#       - name: Restore node_modules from cache
#         uses: actions/cache@v4
#         with:
#           path: |
#             ./node_modules
#             ./penomo_tests/node_modules
#           key: penomo-tests-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             penomo-tests-

#       - name: Install dependencies
#         run: npm ci

#       - name: Install Playwright browsers
#         run: npx playwright install --with-deps

#       - name: Clean previous results
#         run: rm -rf ./allure-results ./test-results

#       - name: Run auth tests (Desktop)
#         run: npx playwright test ./auth/desktop-only --project=chromium

#       - name: Run auth tests (Mobile - excluding desktop-only)
#         run: npx playwright test ./auth/login.spec.ts --project="Mobile Safari"

#       - name: Run E2E tests (Mobile)
#         run: npx playwright test ./E2E --project="Mobile Safari"

#       - name: Copy screenshots/traces to Allure results (Mobile)
#         if: always()
#         run: |
#           echo "Looking for artifacts to copy..."
#           mkdir -p ./allure-results

#           if [ -d "test-results" ]; then
#             echo "Copying from test-results directory..."
#             find test-results -type f \( -name '*.png' -o -name '*.zip' -o -name '*.trace' \) -exec cp -v {} ./allure-results/ \; 2>/dev/null || true
#           fi

#           if [ -d "playwright-report" ]; then
#             echo "Copying from playwright-report directory..."
#             find playwright-report -type f \( -name '*.png' -o -name '*.zip' \) -exec cp -v {} ./allure-results/ \; 2>/dev/null || true
#           fi

#           find . -path "./node_modules" -prune -o -path "./.git" -prune -o -type f \( -name '*.png' -o -name '*.zip' -o -name '*.trace' \) -print -exec cp -v {} ./allure-results/ \; 2>/dev/null || true

#           echo "Final artifacts in allure-results:"
#           ls -lah ./allure-results/ || echo "No artifacts found."

#           echo "=== Final verification ==="
#           echo "Allure results directory size:"
#           du -sh ./allure-results/ 2>/dev/null || echo "Directory not found"

#           echo "Files by type:"
#           find ./allure-results -name "*.png" | wc -l | xargs echo "PNG files:"
#           find ./allure-results -name "*.json" | wc -l | xargs echo "JSON files:"
#           find ./allure-results -name "*.trace" | wc -l | xargs echo "Trace files:"

#           chmod -R 755 ./allure-results/ 2>/dev/null || true

#       - name: Upload Allure raw results (Mobile)
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: allure-results-mobile
#           path: ./penomo_tests/allure-results
#           retention-days: 3
#           if-no-files-found: warn

#   notify-on-failure:
#     name: Generate Allure Report & Notify
#     runs-on: ubuntu-latest
#     needs: [desktop-tests, mobile-tests]
#     if: always() && (needs.desktop-tests.result == 'failure' || needs.mobile-tests.result == 'failure')
#     defaults:
#       run:
#         working-directory: ./penomo_tests

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Create results directory
#         run: mkdir -p ./allure-results

#       - name: Download Desktop Allure results (if available)
#         uses: actions/download-artifact@v4
#         with:
#           name: allure-results-desktop
#           path: ./penomo_tests/allure-results
#         continue-on-error: true

#       - name: Download Mobile Allure results (if available)
#         uses: actions/download-artifact@v4
#         with:
#           name: allure-results-mobile
#           path: ./penomo_tests/allure-results
#         continue-on-error: true

#       - name: Debug downloaded artifacts
#         run: |
#           echo "=== Debug downloaded artifacts ==="
#           echo "Structure of allure-results:"
#           find ./allure-results -type f | head -20

#           echo "=== Files by type ==="
#           echo "JSON files: $(find ./allure-results -name "*.json" | wc -l)"
#           echo "PNG files: $(find ./allure-results -name "*.png" | wc -l)"
#           echo "Trace files: $(find ./allure-results -name "*.trace" | wc -l)"

#           echo "=== Sample files ==="
#           find ./allure-results -name "*.json" | head -3
#           find ./allure-results -name "*.png" | head -3

#       - name: Setup Java (required for Allure)
#         uses: actions/setup-java@v4
#         with:
#           distribution: "temurin"
#           java-version: "11"

#       - name: Install Allure CLI
#         run: |
#           curl -o allure-commandline.zip -Ls https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.zip
#           unzip -q allure-commandline.zip
#           sudo mv allure-2.24.0 /opt/allure
#           sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure
#           allure --version

#       - name: Generate Allure Report
#         run: |
#           if [ -d "./allure-results" ] && [ "$(find ./allure-results -name "*.json" | wc -l)" -gt 0 ]; then
#             echo "Generating Allure report from results..."
#             echo "Using directory: ./allure-results"
#             echo "JSON files found: $(find ./allure-results -name "*.json" | wc -l)"
#             echo "PNG files found: $(find ./allure-results -name "*.png" | wc -l)"

#             allure generate ./allure-results -o ./allure-report --clean
#             echo "Report generated successfully"

#             echo "=== Report contents check ==="
#             if [ -d "./allure-report" ]; then
#               echo "Report directory size: $(du -sh ./allure-report)"
#               find ./allure-report -name "*.png" | wc -l | xargs echo "PNG files in report:"
#             fi
#           else
#             echo "No Allure results found to generate report"
#             mkdir -p ./allure-report
#             echo "<h1>No test results available</h1><p>Tests may have failed before generating Allure results. Check if allure-playwright is configured in playwright.config.js</p>" > ./allure-report/index.html
#           fi

#       - name: Upload Allure Report
#         uses: actions/upload-artifact@v4
#         with:
#           name: allure-report
#           path: ./penomo_tests/allure-report
#           retention-days: 5

#       - name: Extract failure reason
#         run: |
#           echo "Extracting failure reason..."
#           REASON=""

#           if [ -d "./allure-results" ]; then
#             REASON=$(find ./allure-results -name "*.json" -exec jq -r 'select(.status=="failed") | .statusDetails.message // .statusDetails.trace // empty' {} \; 2>/dev/null | head -n 1 | sed 's/"/\\"/g' | tr '\n' ' ' | sed 's/[[:space:]]*$//')
#           fi

#           if [ -z "$REASON" ] || [ "$REASON" = "null" ]; then
#             if [ "${{ needs.desktop-tests.result }}" == "failure" ] && [ "${{ needs.mobile-tests.result }}" == "failure" ]; then
#               REASON="Both desktop and mobile tests failed"
#             elif [ "${{ needs.desktop-tests.result }}" == "failure" ]; then
#               REASON="Desktop tests failed"
#             elif [ "${{ needs.mobile-tests.result }}" == "failure" ]; then
#               REASON="Mobile tests failed"
#             else
#               REASON="Test execution failed - check logs for details"
#             fi
#           fi

#           if [ ${#REASON} -gt 200 ]; then
#             REASON="${REASON:0:200}..."
#           fi

#           echo "REASON=$REASON" >> $GITHUB_ENV

#       - name: Send Slack notification on test failure
#         run: |
#           curl -X POST -H 'Content-type: application/json' \
#             --data "{
#               \"text\": \"*Playwright tests failed* on *${{ github.ref_name }}*\\n*Reason:* \`\`\`${{ env.REASON }}\`\`\`\\n Desktop: ${{ needs.desktop-tests.result }} | Mobile: ${{ needs.mobile-tests.result }}\\n🔎 <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View run>\\n📄 <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts|Download Allure Report>\"
#             }" ${{ secrets.SLACK_WEBHOOK_URL }}

name: Run Playwright tests for IA and AA

name: Run Playwright tests for IA and AA

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  setup:
    name: Cache only (no install)
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-deps.outputs.cache-primary-key }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache node_modules
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            ./node_modules
            ./penomo_tests/node_modules
            ./penomo_accredited/node_modules
          key: penomo-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            penomo-

  desktop-tests:
    name: Run Desktop Tests
    runs-on: ubuntu-latest
    needs: setup  # Чекає setup
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: |
            ./node_modules
            ./penomo_tests/node_modules
          key: penomo-tests-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            penomo-tests-

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Clean previous results
        run: rm -rf ./allure-results ./test-results

      - name: Run auth tests (Desktop)
        run: npx playwright test ./auth --project=chromium
        #continue-on-error: true

      - name: Run E2E tests (Desktop)
        run: npx playwright test ./E2E --project=chromium
        #continue-on-error: true

      - name: Debug test results structure
        if: always()
        run: |
          echo "=== Debugging test results structure ==="
          echo "Current directory structure:"
          find . -maxdepth 3 -type d -name "*result*" -o -name "*report*" | head -20

          echo "=== Looking for image/trace files ==="
          find . -path "./node_modules" -prune -o -type f \( -name '*.png' -o -name '*.trace' \) -print | head -10

          echo "=== Allure results content before copy ==="
          if [ -d "./allure-results" ]; then
            echo "Allure results directory exists"
            ls -la ./allure-results/
          else
            echo "No allure-results directory found"
          fi

      - name: Copy screenshots/traces to Allure results (Desktop)
        if: always()
        run: |
          echo "Looking for artifacts to copy..."
          mkdir -p ./allure-results

          if [ -d "test-results" ]; then
            echo "Copying from test-results directory..."
            find test-results -type f \( -name '*.png' -o -name '*.zip' -o -name '*.trace' \) -exec cp -v {} ./allure-results/ \; 2>/dev/null || true
          fi

          if [ -d "playwright-report" ]; then
            echo "Copying from playwright-report directory..."
            find playwright-report -type f \( -name '*.png' -o -name '*.zip' \) -exec cp -v {} ./allure-results/ \; 2>/dev/null || true
          fi

          find . -path "./node_modules" -prune -o -path "./.git" -prune -o -type f \( -name '*.png' -o -name '*.zip' -o -name '*.trace' \) -print -exec cp -v {} ./allure-results/ \; 2>/dev/null || true

          echo "Final artifacts in allure-results:"
          ls -lah ./allure-results/ || echo "No artifacts found."

          echo "=== Final verification ==="
          echo "Allure results directory size:"
          du -sh ./allure-results/ 2>/dev/null || echo "Directory not found"

          echo "Files by type:"
          find ./allure-results -name "*.png" | wc -l | xargs echo "PNG files:"
          find ./allure-results -name "*.json" | wc -l | xargs echo "JSON files:"
          find ./allure-results -name "*.trace" | wc -l | xargs echo "Trace files:"

          chmod -R 755 ./allure-results/ 2>/dev/null || true

      - name: Upload Allure raw results (Desktop)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-desktop
          path: ./allure-results
          retention-days: 3
          if-no-files-found: warn

  AI-accredited-tests:
    name: Run Desktop Tests for Accredited type
    runs-on: ubuntu-latest
    needs: desktop-tests  # Чекає завершення desktop-tests
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ./penomo_accredited

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: |
            ./node_modules
            ./penomo_accredited/node_modules
          key: penomo-tests-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            penomo-tests-

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Clean previous results
        run: rm -rf ./allure-results ./test-results

      - name: Run auth tests (Desktop)
        run: npx playwright test ./auth --project=chromium
        #continue-on-error: true

      - name: Run E2E tests (Desktop)
        run: npx playwright test ./E2E --project=chromium
        #continue-on-error: true

      - name: Debug test results structure
        if: always()
        run: |
          echo "=== Debugging test results structure ==="
          echo "Current directory structure:"
          find . -maxdepth 3 -type d -name "*result*" -o -name "*report*" | head -20

          echo "=== Looking for image/trace files ==="
          find . -path "./node_modules" -prune -o -type f \( -name '*.png' -o -name '*.trace' \) -print | head -10

          echo "=== Allure results content before copy ==="
          if [ -d "./allure-results" ]; then
            echo "Allure results directory exists"
            ls -la ./allure-results/
          else
            echo "No allure-results directory found"
          fi

      - name: Copy screenshots/traces to Allure results (Desktop)
        if: always()
        run: |
          echo "Looking for artifacts to copy..."
          mkdir -p ./allure-results

          if [ -d "test-results" ]; then
            echo "Copying from test-results directory..."
            find test-results -type f \( -name '*.png' -o -name '*.zip' -o -name '*.trace' \) -exec cp -v {} ./allure-results/ \; 2>/dev/null || true
          fi

          if [ -d "playwright-report" ]; then
            echo "Copying from playwright-report directory..."
            find playwright-report -type f \( -name '*.png' -o -name '*.zip' \) -exec cp -v {} ./allure-results/ \; 2>/dev/null || true
          fi

          find . -path "./node_modules" -prune -o -path "./.git" -prune -o -type f \( -name '*.png' -o -name '*.zip' -o -name '*.trace' \) -print -exec cp -v {} ./allure-results/ \; 2>/dev/null || true

          echo "Final artifacts in allure-results:"
          ls -lah ./allure-results/ || echo "No artifacts found."

          echo "=== Final verification ==="
          echo "Allure results directory size:"
          du -sh ./allure-results/ 2>/dev/null || echo "Directory not found"

          echo "Files by type:"
          find ./allure-results -name "*.png" | wc -l | xargs echo "PNG files:"
          find ./allure-results -name "*.json" | wc -l | xargs echo "JSON files:"
          find ./allure-results -name "*.trace" | wc -l | xargs echo "Trace files:"

          chmod -R 755 ./allure-results/ 2>/dev/null || true

      - name: Upload Allure raw results (Accredited)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-accredited
          path: ./allure-results
          retention-days: 3
          if-no-files-found: warn

  mobile-tests:
    name: Run Mobile Tests
    runs-on: ubuntu-latest
    needs: AI-accredited-tests  # Чекає завершення AI-accredited-tests
    if: always()
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: |
            ./node_modules
            ./penomo_tests/node_modules
          key: penomo-tests-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            penomo-tests-

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Clean previous results
        run: rm -rf ./allure-results ./test-results

      - name: Run auth tests (Desktop)
        run: npx playwright test ./auth/desktop-only --project=chromium
        #continue-on-error: true

      - name: Run auth tests (Mobile - excluding desktop-only)
        run: npx playwright test ./auth/login.spec.ts --project="Mobile Safari"
        #continue-on-error: true

      - name: Run E2E tests (Mobile)
        run: npx playwright test ./E2E --project="Mobile Safari"
        #continue-on-error: true

      - name: Copy screenshots/traces to Allure results (Mobile)
        if: always()
        run: |
          echo "Looking for artifacts to copy..."
          mkdir -p ./allure-results

          if [ -d "test-results" ]; then
            echo "Copying from test-results directory..."
            find test-results -type f \( -name '*.png' -o -name '*.zip' -o -name '*.trace' \) -exec cp -v {} ./allure-results/ \; 2>/dev/null || true
          fi

          if [ -d "playwright-report" ]; then
            echo "Copying from playwright-report directory..."
            find playwright-report -type f \( -name '*.png' -o -name '*.zip' \) -exec cp -v {} ./allure-results/ \; 2>/dev/null || true
          fi

          find . -path "./node_modules" -prune -o -path "./.git" -prune -o -type f \( -name '*.png' -o -name '*.zip' -o -name '*.trace' \) -print -exec cp -v {} ./allure-results/ \; 2>/dev/null || true

          echo "Final artifacts in allure-results:"
          ls -lah ./allure-results/ || echo "No artifacts found."

          echo "=== Final verification ==="
          echo "Allure results directory size:"
          du -sh ./allure-results/ 2>/dev/null || echo "Directory not found"

          echo "Files by type:"
          find ./allure-results -name "*.png" | wc -l | xargs echo "PNG files:"
          find ./allure-results -name "*.json" | wc -l | xargs echo "JSON files:"
          find ./allure-results -name "*.trace" | wc -l | xargs echo "Trace files:"

          chmod -R 755 ./allure-results/ 2>/dev/null || true

      - name: Upload Allure raw results (Mobile)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-mobile
          path: ./allure-results
          retention-days: 3
          if-no-files-found: warn

  notify-on-failure:
    name: Generate Allure Report & Notify
    runs-on: ubuntu-latest
    needs: [desktop-tests, mobile-tests, AI-accredited-tests]  # Чекає всі попередні джоби
    if: always() && (needs.desktop-tests.result == 'failure' || needs.mobile-tests.result == 'failure' || needs.AI-accredited-tests.result == 'failure')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create results directory
        run: mkdir -p ./allure-results-merged

      - name: Download Desktop Allure results (if available)
        uses: actions/download-artifact@v4
        with:
          name: allure-results-desktop
          path: ./allure-results-merged
        continue-on-error: true

      - name: Download Accredited Allure results (if available)
        uses: actions/download-artifact@v4
        with:
          name: allure-results-accredited
          path: ./allure-results-merged
        continue-on-error: true

      - name: Download Mobile Allure results (if available)
        uses: actions/download-artifact@v4
        with:
          name: allure-results-mobile
          path: ./allure-results-merged
        continue-on-error: true

      - name: Debug downloaded artifacts
        run: |
          echo "=== Debug downloaded artifacts ==="
          echo "Structure of allure-results-merged:"
          find ./allure-results-merged -type f | head -20

          echo "=== Files by type ==="
          echo "JSON files: $(find ./allure-results-merged -name "*.json" | wc -l)"
          echo "PNG files: $(find ./allure-results-merged -name "*.png" | wc -l)"
          echo "Trace files: $(find ./allure-results-merged -name "*.trace" | wc -l)"

          echo "=== Sample files ==="
          find ./allure-results-merged -name "*.json" | head -3
          find ./allure-results-merged -name "*.png" | head -3

      - name: Setup Java (required for Allure)
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "11"

      - name: Install Allure CLI
        run: |
          curl -o allure-commandline.zip -Ls https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.zip
          unzip -q allure-commandline.zip
          sudo mv allure-2.24.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure
          allure --version

      - name: Generate Allure Report
        run: |
          if [ -d "./allure-results-merged" ] && [ "$(find ./allure-results-merged -name "*.json" | wc -l)" -gt 0 ]; then
            echo "Generating Allure report from results..."
            echo "Using directory: ./allure-results-merged"
            echo "JSON files found: $(find ./allure-results-merged -name "*.json" | wc -l)"
            echo "PNG files found: $(find ./allure-results-merged -name "*.png" | wc -l)"
            
            allure generate ./allure-results-merged -o ./allure-report --clean
            echo "Report generated successfully"
            
            echo "=== Report contents check ==="
            if [ -d "./allure-report" ]; then
              echo "Report directory size: $(du -sh ./allure-report)"
              find ./allure-report -name "*.png" | wc -l | xargs echo "PNG files in report:"
            fi
          else
            echo "No Allure results found to generate report"
            mkdir -p ./allure-report
            echo "<h1>No test results available</h1><p>Tests may have failed before generating Allure results. Check if allure-playwright is configured in playwright.config.js</p>" > ./allure-report/index.html
          fi

      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: ./allure-report
          retention-days: 5

      - name: Extract failure reason
        run: |
          echo "Extracting failure reason..."
          REASON=""

          if [ -d "./allure-results-merged" ]; then
            REASON=$(find ./allure-results-merged -name "*.json" -exec jq -r 'select(.status=="failed") | .statusDetails.message // .statusDetails.trace // empty' {} \; 2>/dev/null | head -n 1 | sed 's/"/\\"/g' | tr '\n' ' ' | sed 's/[[:space:]]*$//')
          fi

          if [ -z "$REASON" ] || [ "$REASON" = "null" ]; then
            if [ "${{ needs.desktop-tests.result }}" == "failure" ] && [ "${{ needs.mobile-tests.result }}" == "failure" ] && [ "${{ needs.AI-accredited-tests.result }}" == "failure" ]; then
              REASON="All test suites failed"
            elif [ "${{ needs.desktop-tests.result }}" == "failure" ] && [ "${{ needs.mobile-tests.result }}" == "failure" ]; then
              REASON="Desktop and mobile tests failed"
            elif [ "${{ needs.desktop-tests.result }}" == "failure" ] && [ "${{ needs.AI-accredited-tests.result }}" == "failure" ]; then
              REASON="Desktop and accredited tests failed"
            elif [ "${{ needs.mobile-tests.result }}" == "failure" ] && [ "${{ needs.AI-accredited-tests.result }}" == "failure" ]; then
              REASON="Mobile and accredited tests failed"
            elif [ "${{ needs.desktop-tests.result }}" == "failure" ]; then
              REASON="Desktop tests failed"
            elif [ "${{ needs.mobile-tests.result }}" == "failure" ]; then
              REASON="Mobile tests failed"
            elif [ "${{ needs.AI-accredited-tests.result }}" == "failure" ]; then
              REASON="Accredited tests failed"
            else
              REASON="Test execution failed - check logs for details"
            fi
          fi

          if [ ${#REASON} -gt 200 ]; then
            REASON="${REASON:0:200}..."
          fi

          echo "REASON=$REASON" >> $GITHUB_ENV

      - name: Send Slack notification on test failure
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"❌ *Playwright tests failed* on *${{ github.ref_name }}*\\n*Reason:* \`\`\`${{ env.REASON }}\`\`\`\\n📊 Desktop: ${{ needs.desktop-tests.result }} | Accredited: ${{ needs.AI-accredited-tests.result }} | Mobile: ${{ needs.mobile-tests.result }}\\n🔎 <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View run>\\n📄 <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts|Download Allure Report>\" 
            }" ${{ secrets.SLACK_WEBHOOK_URL }}